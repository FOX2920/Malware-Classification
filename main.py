import streamlit as st
from PIL import Image
import tensorflow as tf
import numpy as np
import h5py
import os

# Get the path to the pre-trained model
current_dir = os.path.dirname(os.path.abspath(__file__))
model_path = os.path.join(current_dir, "EfficientNetB4_model.h5")

# Load the pre-trained model
with h5py.File(model_path, 'r') as f:
    model = load_model(f)


# Streamlit app
st.title("Malware Image Prediction App")

# Upload image through Streamlit
uploaded_file = st.file_uploader("Choose an image...", type="jpg")

if uploaded_file is not None:
    # Display the uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image.", use_column_width=True)

    # Preprocess the image for prediction
    img_array = tf.keras.preprocessing.image.img_to_array(image)
    img_array = tf.image.resize(img_array, (75, 75))
    img_array = tf.expand_dims(img_array, 0)  # Create batch axis

    # Make prediction
    predictions = model.predict(img_array)
    predicted_class = tf.argmax(predictions[0]).numpy()

    # Display the prediction
    st.write("Prediction:")
    st.write(f"Class: {predicted_class}")

    # Display the probability distribution
    st.write("Probability Distribution:")
    st.bar_chart(predictions[0])
