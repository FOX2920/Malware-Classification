import streamlit as st
from PIL import Image
import tensorflow as tf
import numpy as np
import gdown
import h5py
import os

# Replace YOUR_MODEL_FILE_ID with the actual file ID
file_id = "18XK8Od6Es9C6o-hJAxd_2fABAVxLLt1b"
google_drive_link = f"https://drive.google.com/uc?id={file_id}"

# Download the model file
model_file_path = "efficientnetb4_model.h5"
if not os.path.exists(model_file_path):
    gdown.download(google_drive_link, model_file_path, quiet=False)

# Load the model using h5py
with h5py.File(model_file_path, 'r') as file:
    # Access the 'model_weights' group
    model_weights_group = file['model_weights']

    # Convert model weights group to list
    model_weights = [tf.constant(weights) for weights in model_weights_group]

    # Create a new model using the model weights
    model = tf.keras.Sequential()
    model.build((None,))  # Build the model with input shape
    model.set_weights(model_weights)

# Streamlit app
st.title("Malware Image Prediction App")

# Upload image through Streamlit
uploaded_file = st.file_uploader("Choose an image...", type="jpg")

if uploaded_file is not None:
    # Display the uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image.", use_column_width=True)

    # Preprocess the image for prediction
    img_array = tf.keras.preprocessing.image.img_to_array(image)
    img_array = tf.image.resize(img_array, (75, 75))
    img_array = tf.expand_dims(img_array, 0)  # Create batch axis

    # Make prediction
    predictions = model.predict(img_array)
    predicted_class = tf.argmax(predictions[0]).numpy()

    # Display the prediction
    st.write("Prediction:")
    st.write(f"Class: {predicted_class}")

    # Display the probability distribution
    st.write("Probability Distribution:")
    st.bar_chart(predictions[0])
