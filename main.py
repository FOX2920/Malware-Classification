import streamlit as st
from PIL import Image
import tensorflow as tf
from tensorflow.keras.applications import EfficientNetB4
import numpy as np

# Load the saved model
model_path = "malimg_models/EfficientNetB4_model.h5"  # Update with your actual path
model = tf.keras.models.load_model(model_path)

# Define the image size based on the model's input shape
img_size = (75, 75)

def preprocess_image(image):
    # Preprocess the input image
    img = image.resize(img_size)
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0  # Normalize pixel values to be between 0 and 1
    return img_array

def predict_image(image, model):
    # Get the model predictions
    img_array = preprocess_image(image)
    predictions = model.predict(img_array)
    return predictions

def main():
    st.title("Malware Image Prediction App")

    # Upload image through Streamlit
    uploaded_file = st.file_uploader("Choose a malware image...", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        # Display the uploaded image
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # Make predictions
        predictions = predict_image(image, model)

        # Display predictions
        st.subheader("Model Predictions:")
        for i, pred in enumerate(predictions[0]):
            st.write(f"Class {i}: {pred:.2%}")

if __name__ == "__main__":
    main()

